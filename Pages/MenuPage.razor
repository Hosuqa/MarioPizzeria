@page "/menu"
@inject MarioPizzeria.Services.PizzaService PizzaService
@inject MarioPizzeria.Services.CartService CartService


<div class="pt-32 flex flex-col items-center relative min-vh-100">
    @if (pizzas == null)
    {
        <p>Ładowanie menu...</p>
    }
    else if (!pizzas.Any())
    {
        <p>Brak dostępnych pizz.</p>
    }
    else
    {
        <p class="pb-8 text-gray-900 opacity-75">Wszystkie Pizze w naszej pizzeri występują w rozmiarze 35cm</p>
        @foreach (var pizza in pizzas)
        {
            <div class="w-[800px] group hover:bg-[#FEEFEF] duration-300 mx-auto bg-[#fff] rounded-xl shadow-md overflow-hidden relative h-full mb-4 ">
                <div class="flex items-center p-4 h-full group">
                    <div class="h-full w-80 m-6 absolute -left-32 bottom-10 group-hover:scale-[105%] duration-300">
                        <img src="@($"{pizza.Name}.png")" alt="@pizza.Name" class="w-full h-fit" draggable="false"/>
                    </div>
                    <div class="flex-grow ml-56 h-[80px] flex flex-col justify-center">
                        <h2 class="text-[26px] mb-2 font-bold">@pizza.Name</h2>
                        <p class="text-gray-600 text-sm">
                            @pizza.Description
                        </p>
                    </div>
                    <div class="text-right h-full">
                        <div class="flex h-full items-center ">
                                <div class="flex flex-col h-full gap-2 h-full w-28">
                                    <span class="text-lg flex justify-center font-semibold">@Price[pizza.Id].ToString("F2") PLN</span>
                                    <div class="flex gap-2 justify-center ">
                                        <div class="w-6 h-full cursor-pointer hover:scale-125 duration-300" @onclick="() => DecrementQuantity(pizza)">
                                            <img src="minus.png">
                                        </div>
                                        <p class="font-bold">@GetQuantity(pizza)</p>
                                        <div class="w-6 h-full cursor-pointer hover:scale-125 duration-300" @onclick="() => IncrementQuantity(pizza)">
                                            <img src="add.png">
                                        </div>
                                    </div>
                                </div>
                                <div class="mx-4 h-14 w-[2px] bg-black"></div>
                                <div class="w-12 text-black h-full cursor-pointer hover:scale-110 duration-300 mx-2" @onclick="() => AddToCart(pizza)">
                                    <img src="blackcart.png">
                                </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }

    <NavLink href="cart">
        <div class="mb-4 h-fit text-white justify-between flex p-4 mx-auto bg-red-500 rounded-xl shadow-md overflow-hidden hover:bg-red-600 cursor-pointer transition-all duration-300">
            Przejdź do podsumowania
        </div>
    </NavLink>
</div>

@code {
    private List<MarioPizzeria.Models.Pizza>? pizzas;
    private Dictionary<int, int> pizzaQuantities = new Dictionary<int, int>(); // Słownik do przechowywania ilości pizzy
    private Dictionary<int, float> Price = new Dictionary<int, float>(); // Słownik do przechowywania ilości pizzy

    protected override async Task OnInitializedAsync()
    {
        pizzas = await PizzaService.GetPizzasAsync();
        if (pizzas != null)
        {
            foreach (var pizza in pizzas)
            {
                Price[pizza.Id] = pizza.BasePrice; // Ustaw podstawową cenę pizzy
                pizzaQuantities[pizza.Id] = 1; // Ustaw domyślną ilość na 1
            }
        }
    }

    private int GetQuantity(MarioPizzeria.Models.Pizza pizza)
    {
        // Zwraca ilość pizzy, jeśli istnieje w słowniku, lub domyślnie 1
        return pizzaQuantities.ContainsKey(pizza.Id) ? pizzaQuantities[pizza.Id] : 1;
    }

    private void IncrementQuantity(MarioPizzeria.Models.Pizza pizza)
    {
        if (!pizzaQuantities.ContainsKey(pizza.Id))
        {
            pizzaQuantities[pizza.Id] = 1; // Ustawienie domyślnej ilości na 1
        }

        pizzaQuantities[pizza.Id]++;
        UpdatePrice(pizza);
    }

    private void DecrementQuantity(MarioPizzeria.Models.Pizza pizza)
    {
        if (pizzaQuantities.ContainsKey(pizza.Id) && pizzaQuantities[pizza.Id] > 1)
        {
            pizzaQuantities[pizza.Id]--;
            UpdatePrice(pizza);
        }
    }

    private void UpdatePrice(MarioPizzeria.Models.Pizza pizza)
    {
        Price[pizza.Id] = pizzaQuantities[pizza.Id] * pizza.BasePrice;
        StateHasChanged(); 
    }
    private void AddToCart(MarioPizzeria.Models.Pizza pizza)
{
    CartService.AddToCart(
        pizza.Id,
        pizza.Name,
        pizza.Description,
        GetQuantity(pizza),
        pizza.BasePrice
    );
}
}