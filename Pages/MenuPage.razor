@page "/menu"
@inject MarioPizzeria.Services.PizzaService PizzaService
@inject MarioPizzeria.Services.CartService CartService

<div class="pt-32 flex flex-col items-center relative min-vh-100">
    @if (pizzas == null)
    {
        <p>Ładowanie menu...</p>
    }
    else if (!pizzas.Any())
    {
        <p>Brak dostępnych pizz.</p>
    }
    else
    {
        <div class="w-[800px] mb-8 flex p-4 bg-white rounded-xl shadow-md overflow-hidden flex-col">
            <p class="text-center text-[30px] text-red-500 font-bold mb-2">MARIO MENU</p>
            <p class="text-center text-gray-900 font-semibold opacity-75">Wszystkie Pizze w naszej pizzerii występują w rozmiarze 35cm!</p>
        </div>
        @foreach (var pizza in pizzas)
        {
            <div class="w-[800px] group hover:bg-[#FEEFEF] duration-300 mx-auto bg-[#fff] rounded-xl shadow-md overflow-hidden relative h-full mb-4">
                <div class="flex items-center p-4 h-full group">
                    <div class="h-full w-80 m-6 absolute -left-32 bottom-10 group-hover:scale-[105%] duration-300">
                        <img src="@($"{pizza.Name}.png")" alt="@pizza.Name" class="w-full h-fit" draggable="false"/>
                    </div>
                    <div class="flex-grow ml-56 h-[80px] flex flex-col justify-center">
                        <h2 class="text-[26px] mb-2 font-bold">@pizza.Name</h2>
                        <p class="text-gray-600 text-sm pr-12">@pizza.Description</p>
                    </div>
                    <div class="text-right h-full">
                        <div class="flex h-full items-center">
                            <div class="flex flex-col h-full gap-2 w-28">
                                <span class="text-lg flex justify-center font-semibold">@Price[pizza.Id].ToString("F2") PLN</span>
                                <div class="flex gap-2 justify-center">
                                    <div class="w-6 h-full cursor-pointer hover:scale-125 duration-300" @onclick="() => DecrementQuantity(pizza)">
                                        <img src="minus.png">
                                    </div>
                                    <p class="font-bold">@GetQuantity(pizza)</p>
                                    <div class="w-6 h-full cursor-pointer hover:scale-125 duration-300" @onclick="() => IncrementQuantity(pizza)">
                                        <img src="add.png">
                                    </div>
                                </div>
                            </div>
                            <div class="mx-4 h-14 w-[2px] bg-black"></div>
                            <div class="w-12 text-black h-full cursor-pointer hover:scale-110 duration-300 mx-2" @onclick="() => HandleCartAndPopUp(pizza)">
                                <img src="blackcart.png">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }

    <NavLink href="cart">
        <div class="mb-4 h-fit text-white justify-between flex p-4 mx-auto bg-red-500 rounded-xl shadow-md overflow-hidden hover:bg-red-600 cursor-pointer transition-all duration-300">
            Przejdź do podsumowania
        </div>
    </NavLink>
</div>

@if (showPopUp)
{
    <div class="fixed top-0 left-0 w-full h-full flex justify-center items-center bg-black bg-opacity-50 z-50">
        <div class="bg-white h-fit w-[600px] rounded-xl shadow-md p-6 text-center relative">
            <!-- Przycisk zamykania (X) -->
            <button class="absolute top-3 right-3 text-gray-600 hover:text-gray-900 transition-all duration-200"
                    @onclick="ClosePopUp">
                <span class="material-icons">close</span>
            </button>

            <h2 class="text-2xl font-bold mb-4">Zamówienie</h2>
            <p class="text-lg">@popUpMessage</p>

            <!-- Licznik czasu do zamknięcia -->
            <p class="text-sm text-gray-500 my-2">Zamknięcie za: <span class="font-bold">@popupCountdown</span> s</p>

            <div class="flex flex-row items-center justify-center mt-3 gap-2">
                <div>
                    <button class="px-6 py-2 w-[180px] bg-green-500 text-white rounded-lg hover:bg-green-600 transition-all duration-300"
                            @onclick="ClosePopUp">
                        Kontynuuj zakupy
                    </button>
                </div>
                <NavLink href="cart"> 
                    <button class="px-6 py-2 w-[180px] bg-red-500 text-white rounded-lg hover:bg-red-600 transition-all duration-300">
                        Podsumowanie
                    </button>
                </NavLink>
            </div>
        </div>
    </div>
}
@code {
    private List<MarioPizzeria.Models.Pizza>? pizzas;
    private Dictionary<int, int> pizzaQuantities = new Dictionary<int, int>();
    private Dictionary<int, float> Price = new Dictionary<int, float>();

    private bool showPopUp = false;
    private string popUpMessage = "";
    private int popupCountdown;
    protected override async Task OnInitializedAsync()
    {
        pizzas = await PizzaService.GetPizzasAsync();
        if (pizzas != null)
        {
            foreach (var pizza in pizzas)
            {
                Price[pizza.Id] = pizza.BasePrice;
                pizzaQuantities[pizza.Id] = 1;
            }
        }
    }

    private int GetQuantity(MarioPizzeria.Models.Pizza pizza)
    {
        return pizzaQuantities.ContainsKey(pizza.Id) ? pizzaQuantities[pizza.Id] : 1;
    }

    private void IncrementQuantity(MarioPizzeria.Models.Pizza pizza)
    {
        if (!pizzaQuantities.ContainsKey(pizza.Id))
        {
            pizzaQuantities[pizza.Id] = 1;
        }

        pizzaQuantities[pizza.Id]++;
        UpdatePrice(pizza);
    }

    private void DecrementQuantity(MarioPizzeria.Models.Pizza pizza)
    {
        if (pizzaQuantities.ContainsKey(pizza.Id) && pizzaQuantities[pizza.Id] > 1)
        {
            pizzaQuantities[pizza.Id]--;
            UpdatePrice(pizza);
        }
    }

    private void UpdatePrice(MarioPizzeria.Models.Pizza pizza)
    {
        Price[pizza.Id] = pizzaQuantities[pizza.Id] * pizza.BasePrice;
        StateHasChanged();
    }

    private void AddToCart(MarioPizzeria.Models.Pizza pizza)
    {
        CartService.AddToCart(
            pizza.Id,
            pizza.Name,
            pizza.Description,
            GetQuantity(pizza),
            pizza.BasePrice
        );
    }

 private async Task ShowPopUp(MarioPizzeria.Models.Pizza pizza)
    {
        var quantity = GetQuantity(pizza);
        popUpMessage = $"Dodałeś {quantity} pizze {pizza.Name} ({Price[pizza.Id]} PLN)";
        showPopUp = true;
        popupCountdown = 8;
        StateHasChanged();

        while (popupCountdown > 0)
        {
            await Task.Delay(1000);
            popupCountdown--;
            StateHasChanged();
        }

        if (showPopUp) // Jeśli użytkownik nie zamknął popupu ręcznie
        {
            ClosePopUp();
        }
    }

    private void ClosePopUp()
    {
        showPopUp = false;
        popupCountdown = 0;
        StateHasChanged();
    }

    private async Task HandleCartAndPopUp(MarioPizzeria.Models.Pizza pizza)
    {
        AddToCart(pizza);
        await ShowPopUp(pizza);
        pizzaQuantities[pizza.Id] = 1;
        Price[pizza.Id] = pizza.BasePrice;
    }
}
